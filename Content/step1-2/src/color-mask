#!/usr/bin/env python3

import sys
import numpy as np
from PIL import Image
import os.path
from os import listdir
from os.path import isfile, join
import os

USAGE = """
# Usage

> Create a mask for each unique color present in the paletted input image
 python3 color-mask PATH_TO_INPUT_FILE PATH_FOR_OUTPUT (no extension on output path BUT do add it on input file)
    (The Input file should be a paletted PNG image)

> List all colors contained in an image.
 ./color-mask colors ./PATH_TO_IMAGE_FILE
    (The Image file should be a paletted PNG image)
"""

"""
get_colors: List all unique colors codes found in an image.
Params(
    image_path[str]: Relative path to an image file,
    silent[bool]: Default False | Set to True to block print statements
    )
Returns( List[Tuple] )
"""
def get_colors(image_path, silent=False):
    im = Image.open(image_path, 'r')
    na = np.array(im.convert('RGB'))
    colors, counts = np.unique(na.reshape(-1,3), axis=0, return_counts=1) 
    if not silent:
        for c in colors:
            print(' - ', c)
    return colors
    
    
"""
get_masks: masks each unique color in the image
Params(
    image_path[str]: Relative path to an image file,
    output_path[str]: Relative path to an output image file,
    silent[bool]: Default False | Set to True to block print statements
    )
Returns( image )
"""
    
def get_masks(image_path, output_path, silent=False):
   #empties Output folder
    allfiles = [f for f in listdir('Output\\') if isfile(join('Output\\', f))];
    for file in allfiles:
        os.remove('Output\\'+file);
    #empties preview folder    
    allfiles = [f for f in listdir('Preview\\') if isfile(join('Preview\\', f))];
    for file in allfiles:
        os.remove('Preview\\'+file);   
    allfiles = [f for f in listdir('Preview\\GCode\\') if isfile(join('Preview\\GCode\\', f))];
    for file in allfiles:
        os.remove('Preview\\GCode\\'+file);
    
    im = Image.open(image_path, 'r')
    na = np.array(im.convert('RGB'))

    
    colors = [];
    colorpath = os.path.realpath('Input\colors.txt');
    with open(colorpath, 'r') as f:
        i = 0;
        for line in f:
            colarrstr = line.split(",");
            colarr = [float(colarrstr[0]),float(colarrstr[1]),float(colarrstr[2])]
            i = i + 1;
            colors.append(colarr);
    
    i = 0
    print("Creating color masks for " + str(len(colors)) + " colors...")
    for c in colors:
        out = Image.new('RGB', im.size, (0, 0, 0))
        width, height = im.size
        for x in range(width):
            for y in range(height):
                if np.array_equal(c,na[y][x]):
                    out.putpixel((x, y), (0,0,0))
                else:
                    out.putpixel((x, y), (255,255,255))
        print("saving mask for RGB color " +str(c) +" in: " + output_path+str(i)+".png")
        out.save(output_path+str(i)+".png", "PNG")        
        i = i + 1
    return out


"""
main: Parse sys args and pass values to create_new_img_mask.
Params()
Returns()
"""
def main():
    if len(sys.argv) == 3 and sys.argv[1] == 'colors':
        get_colors(sys.argv[2])
        output_path = str(sys.argv[2])
        
    elif len(sys.argv) < 3:
        print(USAGE)
    else:
        input_path = str(sys.argv[1])
        output_path = str(sys.argv[2])
        get_masks(input_path, output_path)
    return


if __name__ == '__main__':
    main()
