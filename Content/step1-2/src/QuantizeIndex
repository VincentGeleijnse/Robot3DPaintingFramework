#!/usr/bin/env python3

import sys
import numpy as np
from PIL import Image
import os.path
from os import listdir
from os.path import isfile, join
import os

from skimage import io, color

USAGE = """
# Usage

> Crop and scale RenderTarget Texture to correct dimensions
 python3 cropScaleRenderTarget PATH_TO_INPUT_FILE 
    (The Input file should be a paletted PNG image)

"""



    
    

    
def CropScaleImages(rtPath, silent=False):

    
    im = Image.open(rtPath, 'r')
    
  
    rgb = io.imread(rtPath)[:,:,:3]
    lab = color.rgb2lab(rgb,illuminant='D65', observer='2')

   
    na = np.array(rgb)
    
    palette = [];
    colorpath = os.path.realpath('Input\colors.txt');
    with open(colorpath, 'r') as f:
        i = 0;
        for line in f:
            colarrstr = line.split(",");
            colarr = (int(colarrstr[0]),int(colarrstr[1]),int(colarrstr[2]))
            i = i + 1;
            palette.append(colarr);
    
    #print(palette)
 
    width, height = im.size
    out = Image.new('RGB', im.size, (255, 255, 255))
    for x in range(width):
        for y in range(height):
            col = GetClosestColor(na[y][x],palette);
            out.putpixel((x, y), col)
    
    output_path = rtPath.removesuffix('.png') + 'tet.png'
  
    out.save(output_path, "PNG")     
    return 
    
    

          
    


"""
main: Parse sys args and pass values to create_new_img_mask.
Params()
Returns()
"""
def main():

    rtPath = str(sys.argv[1]);
    
    CropScaleImages(rtPath);
    return
    
def GetClosestColor(pixel,palette):
    closestDistance = 10000000;
    for col in palette:
        #print(col)
        #c = color.rgb2lab(col,illuminant='D65', observer='2')
        #print(str(c)+"c")
        #print(str(pixel)+"p")
        #c = RGBtoLAB(col)
        #print(str(c) +"c");
        #print(str(pixel) + "p");
        distance = EuclidianDistance(pixel,col);
        if(distance < closestDistance):
            closestColor = col;
            closestDistance = distance;
    return closestColor
        
    
def EuclidianDistance(p,q):
    point1 = np.array((p[0], p[1], p[2]));
    point2 = np.array((q[0], q[1], q[2]));
    # calculating Euclidean distance
    # using linalg.norm()
    dist = np.linalg.norm(point1 - point2);
    return dist;
    
def RGBtoLAB(rgb):
    return(XYZtoLAB(RGBtoXYZ(rgb)));

def RGBtoXYZ(rgb):
    r = rgb[0] / 255;
    g = rgb[1] / 255;
    b = rgb[2] / 255;
    
    if (r > 0.04045):
        r = pow(((r + 0.055) / 1.055), 2.4);
        
    else:
        r = r / 12.92;
    

    if (g > 0.04045):
        g = pow(((g + 0.055) / 1.055), 2.4);
       
    else:
        g = g / 12.92;
    

    if (b > 0.04045):
        b = pow(((b + 0.055) / 1.055), 2.4);
       
    else:
        b = b / 12.92;
    

    x = r * 100;
    y = g * 100;
    z = b * 100;

    return (x,y,z);
    
def XYZtoLAB(xyz):
    refX = 95.047;
    refY = 100;
    refZ = 108.883;
    #ref based on 2 degrees standard Observer D65 daylight

    x = xyz[0] / refX;
    y = xyz[1] / refY;
    z = xyz[2] / refZ;

    if (x > 0.008856):
        x = pow(x, 1/3);
    else:
        x = (7.787 * x) + (16 / 116);
    

    if (y > 0.008856):
        y = pow(y, (1/3));
    else:
        y = (7.787 * y) + (16 / 116);
    

    if (z > 0.008856):
        z = pow(z, 1/3);
    else:
        z = (7.787 * z) + (16 / 116);
    

    
    L = (116*y)-16;
    a = 500*(x-y);
    b = 200*(y-z);
    print((L,a,b))
    return(L,a,b);
   



if __name__ == '__main__':
    main()
