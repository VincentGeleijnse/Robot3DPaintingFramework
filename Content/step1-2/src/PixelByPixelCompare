#!/usr/bin/env python3

import sys
import numpy as np
from PIL import Image
from PIL import ImageCms
from PIL import ImageTk
from skimage import color
import os.path
from os import listdir
from os.path import isfile, join
import os

USAGE = """
# Usage

> Compare two images pixel by pixel and print out the percentage of the image that is different
 python3 PixelByPixelCompare PATH_TO_INPUT_FILE PATH_FOR_OUTPUT 
    (The Input file should be a paletted PNG image)

> List all colors contained in an image.
 ./color-mask colors ./PATH_TO_IMAGE_FILE
    (The Image file should be a paletted PNG image)
"""



    
    
"""
compareImages: compares each pixel of two images
Params(
    origImg_path[str]: Relative path to an image file,
    drawnImg_path[str]: Relative path to an output image file,
    silent[bool]: Default False | Set to True to block print statements
    )
Returns( image )
"""
    
def compareImages(origImg_path, drawnImg_path, silent=False):

    
    im1 = Image.open(origImg_path, 'r')
    img1_conv = convert_to_srgb(im1);
    im2 = Image.open(drawnImg_path, 'r')
    img2_conv = convert_to_srgb(im2);
   
    na1 = img1_conv.load()
    na2 = img2_conv.load()
    diffCount = 0;
    whiteCount = 0;
    #print(na1[200,200][:3]);
    
    width, height = im1.size
    out = Image.new('RGB', im1.size, (255, 255, 255))
    for x in range(width):
        for y in range(height):
            if not np.array_equal(na1[x,y][:3],na2[x,y][:3]):
                diffCount = diffCount +1;
                out.putpixel((x, y), (0,0,0))
            elif np.array_equal(na1[x,y][:3],na2[x,y][:3]) and np.array_equal(na1[x,y][:3], (255,255,255)):
                whiteCount = whiteCount+1;
    diffpctAll = (diffCount/((width*height)))*100
    diffpctDrawn = (diffCount/((width*height)-whiteCount))*100
    print(str(diffpctAll) +" % of the pixels are different in the total image");
    print(str(diffpctDrawn) +" % of the pixels are different ignoring white space");
    output_path = drawnImg_path.removesuffix('.png') + '_diff.png'
    print("saving difference mask in: " + output_path);
    out.save(output_path, "PNG")     
    output_path = drawnImg_path.removesuffix('.png') +'_origin.png'
    im1.save(output_path, "PNG")  

    with open('./Result/ConfigData.csv', 'r') as f:
        lines = f.readlines()
        last_line = lines[-1]
        last_line = last_line.replace("DIFFCOUNTA",str(diffCount));
        last_line = last_line.replace("DIFFPCTA_ALL",str(diffpctAll));
        last_line = last_line.replace("DIFFPCTA_NOWHITE",str(diffpctDrawn));
        lines[-1] = last_line;
    with open('./Result/ConfigData.csv', 'w') as f:
        for line in lines:
            f.write(line)
    return 
    
    

def convert_to_srgb(img):
    '''Convert PIL image to sRGB color space (if possible)'''
    icc = img.info.get('icc_profile', '')
    if icc:
        io_handle = io.BytesIO(icc)     # virtual file
        src_profile = ImageCms.ImageCmsProfile(io_handle)
        dst_profile = ImageCms.createProfile('sRGB')
        img = ImageCms.profileToProfile(img, src_profile, dst_profile)
    return img          
    


"""
main: Parse sys args and pass values to create_new_img_mask.
Params()
Returns()
"""
def main():

    origImg = str(sys.argv[1]);
    drawnImg = str(sys.argv[2]);
    compareImages(origImg, drawnImg);
    return


if __name__ == '__main__':
    main()
