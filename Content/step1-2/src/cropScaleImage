#!/usr/bin/env python3

import sys
import numpy as np
from PIL import Image
import os.path
from os import listdir
from os.path import isfile, join
import os

USAGE = """
# Usage

> Crop and scale RenderTarget Texture to correct dimensions
 python3 cropScaleRenderTarget PATH_TO_INPUT_FILE 
    (The Input file should be a paletted PNG image)

"""



    
    

    
def CropScaleImages(rtPath, silent=False):

    
    im = Image.open(rtPath, 'r')
    
    
    cropDataFile = open('Intermediate\CropData.txt', mode = 'r', encoding = 'utf-8-sig')
    lines = cropDataFile.readlines()
    cropDataFile.close()
    
    left = 0;
    right = 0;
    top = 0;
    bottom = 0;
    for line in lines:
        line = line.split('=')
        line = [i.strip() for i in line]
        if("left" == line[0]):
            left = float(line[1]);
        elif("right" == line[0]):
            right = float(line[1]);
        elif("top" == line[0]):
            top = float(line[1]);
        elif("bottom" == line[0]):
            bottom = float(line[1]);
            

    im1 = im.crop((left,top,right,bottom));
    
    imgDataFile = open('Input\ImageProperties.txt', mode = 'r', encoding = 'utf-8-sig')
    lines = imgDataFile.readlines()
    imgDataFile.close()
    
    for line in lines:
        line = line.split('=')
        line = [i.strip() for i in line]
        if("width" == line[0]):
            OrigWidth = int(line[1]);
        elif("height" == line[0]):
            OrigHeight = int(line[1]);

    
    im1 = im1.resize((OrigWidth,OrigHeight));
    
    output_path = rtPath.removesuffix('.png') + '_CropScaled.png'
    print("saving cropped Result in: " + output_path);
    im1.save(output_path, "PNG")     
    return 
    
    

          
    


"""
main: Parse sys args and pass values to create_new_img_mask.
Params()
Returns()
"""
def main():

    rtPath = str(sys.argv[1]);
    
    CropScaleImages(rtPath);
    return


if __name__ == '__main__':
    main()
